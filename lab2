
 <!DOCTYPE html>
 <html lang="pl">
 <head>
     <meta charset="utf-8" />
     <title>Pokemon App</title>
     <link rel="stylesheet" href="styles.css" /> 
 </head>
 <body>
 <div id="root"></div>
 
 <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
 <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
 <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
 
 <script type="text/babel">
     const API_URL = "https://pokeapi.co/api/v2/pokemon";
 
     function PokemonList({ pokemons, onSelectPokemon }) {
         return (
             <div className="pokemon-list">
                 {pokemons.map(pokemon => (
                     <div 
                         key={pokemon.id} 
                         className="pokemon-card" 
                         onClick={() => onSelectPokemon(pokemon.id)}
                     >
                         <img src={pokemon.image} alt={pokemon.name} />
                         <h3>{pokemon.name}</h3>
                         <p>ID: {pokemon.id}</p>
                     </div>
                 ))}
             </div>
         );
     }
 
     function PokemonDetails({pokemon, onClose}) {
         if (!pokemon) return null;
 
         return (
             <div className={'pokemon-details active'}>
                 <div className="close-button" onClick={onClose}>X</div>
                 <h3>{pokemon.name}</h3>
                 <img src={pokemon.image} alt={pokemon.name} />
                 <h2>Typy:</h2>
                 <ul>
                     {pokemon.types.map(type => <li key={type}>{type}</li>)}
                 </ul>     
                 <h2>Statystyki:</h2>
                 <ul>
                     {pokemon.stats.map(stat => (
                         <li key={stat.name}>{stat.name}: {stat.value}</li>
                     ))}
                 </ul>
                 <h2>Wzrost:</h2>
                 <p>{pokemon.height}</p>
                 <h2>Waga:</h2>
                 <p>{pokemon.weight}</p> 
             </div>
         );
     }
 
     const root = ReactDOM.createRoot(document.getElementById("root"));

function App() {
    const state = {
        pokemons: [],
        selectedPokemon: null,
        isLoading: true,
        searchTerm: ""
    };

    async function fetchPokemons() {
        state.isLoading = true;
        render();
        try {
            const response = await fetch(`${API_URL}?limit=20`);
            const data = await response.json();
            const pokemonDetails = await Promise.all(
                data.results.map(async (pokemon) => {
                    const id = pokemon.url.split("/").filter(Boolean).pop();
                    const details = await fetch(`${API_URL}/${id}`);
                    const detailsData = await details.json();
                    return {
                        id,
                        name: pokemon.name,
                        image: detailsData.sprites.front_default,
                    };
                })
            );
            state.pokemons = pokemonDetails.filter(pokemon => pokemon !== null);
            state.isLoading = false;
            render();
        } catch (error) {
            console.error("Błąd przy pobieraniu Pokémonów:", error);
            state.isLoading = false;
            render(); 
        }
    }

    async function fetchPokemonDetails(id) {
        state.isLoading = true;
        render();
        try {
            const response = await fetch(`${API_URL}/${id}`);
            const data = await response.json();
            state.selectedPokemon = {
                name: data.name,
                image: data.sprites.front_default,
                types: data.types.map(el => el.type.name),
                stats: data.stats.map(el => ({ name: el.stat.name, value: el.base_stat })),
                height: data.height,
                weight: data.weight
            };
            state.isLoading = false;
            render();
        } catch (error) {
            console.error("Błąd przy pobieraniu szczegółów Pokémona");
            state.isLoading = false;
            render();
        }
    }

    function clearSelection() {
        state.selectedPokemon = null;
        render();
    }

    function handleSearch(event) {
        if (event.key === "Enter") {  
            state.searchTerm = event.target.value.toLowerCase();
            render();
        }
    }

    function render() {
        const filteredPokemons = state.pokemons.filter(pokemon =>
            pokemon.name.toLowerCase().includes(state.searchTerm)
        );

        root.render(  
            <div className="container">
                <header>
                    <h1>Pokemon GO</h1>
                    <input 
                        type="text"
                        placeholder="Wyszukaj Pokemona..."
                        onKeyDown={handleSearch}  
                    />    
                </header>
                <div className="main-content">
                    {state.isLoading ? (
                        <p>Ladowanie...</p>
                    ) : (
                        <>
                            <PokemonList 
                                pokemons={filteredPokemons} 
                                onSelectPokemon={fetchPokemonDetails} 
                            />
                            <PokemonDetails 
                                pokemon={state.selectedPokemon} 
                                onClose={clearSelection} 
                            />
                        </>
                    )}
                </div>
            </div>
        );
    }

    fetchPokemons();  
    render();  
}

App()
 </script>
 
 </body>
 </html>






body {

    font-family: Arial, sans-serif;

    background-color: #f4f4f9;

    margin: 0;

    padding: 0;

    height: auto;

    width: auto;

}

 

.container {

    width: 80%;

    margin: 0 auto;

    display: flex;

    flex-direction: column;

    align-items: center;

    margin-bottom: 500px;

    height: auto;

}

 

header {

    text-align: center;

    margin: 20px 0;

}

 

img {

    height: 140px;

    width: 300px;

}

 

input {

    padding: 10px;

    width: 100%;

    max-width: 400px;

    margin-top: 10px;

    font-size: 16px;

}

 

.main-content {

    display: flex;

    width: 100%;

}

 

.pokemon-list {

    display: flex;

    flex-wrap: wrap;

    justify-content: flex-start;

    margin-top: 20px;

    width: 100%;

    flex: 2;

}

 

.pokemon-card {

    width: 170px;

    height: auto;

    text-align: center;

    background-color: white;

    margin: 10px;

    padding: 10px;

    border-radius: 8px;

    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

    cursor: pointer;

}

 

.pokemon-card:hover {

    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);  /* Zmieniony efekt hover */

}

 

.pokemon-card img {

    width: 120px;

    height: 120px;

}

 

.pokemon-card h3 {

    font-size: 25px;

}

 

.pokemon-card p {

    font-size: 17px;

    font-style: italic;

}

 

.pokemon-details {

    background-color: white;

    padding: 20px;

    margin-top: 20px;

    border-radius: 8px;

    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

    width: 30%;

    flex: 1;

    margin-left: 20px;

    display: none;

    height: 800px;

}

 

.pokemon-details.active {

    display: block;

}

 

.pokemon-details h2 {

    text-align: center;

    font-size: 25px;

}

 

.pokemon-details h3 {

    text-align: center;

    text-transform: capitalize;

    font-size: 30px;

}

 

.pokemon-details li {

    font-size: 20px;

}

 

.pokemon-details img {

    height: 150px;

    width: 150px;

}

 

.loading {

    text-align: center;

    display: none;

    font-weight: bold;

}

 

.close-button {

    text-align: right;

    cursor: pointer;

}




